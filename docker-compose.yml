version: '3.1'

services:
  bond-movies-api-nodejs:
    build:
      context: ./bond-movies-api-nodejs
      dockerfile: ./Dockerfile
    depends_on:
      - dynamodb
    ports:
      - 3001:3000
    working_dir: /opt/bond-movies-api

  bond-movies-api-spring-dynamodb:
    build:
      context: ./bond-movies-api-spring-dynamodb
      dockerfile: ./src/main/resources/docker/Dockerfile
    depends_on:
      - dynamodb
    ports:
      - 3002:8080
    working_dir: /

  bond-movies-api-spring-postgresql:
    build:
      context: ./bond-movies-api-spring-postgresql
      dockerfile: ./src/main/resources/docker/Dockerfile
    depends_on:
      - postgresql
    ports:
      - 3003:8080
    working_dir: /

  dynamodb:
    entrypoint: ["java", "-Djava.library.path=./DynamoDBLocal_lib", "-jar", "DynamoDBLocal.jar", "-sharedDb"]
    container_name: dynamodb
    image: amazon/dynamodb-local
    ports:
      - 8000:8000
    volumes:
      - ./storage/dynamodb-data:/data
    working_dir: /home/dynamodblocal

  zoo:
    container_name: zoo1
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=0.0.0.0:2888:3888
    hostname: zoo1
    image: zookeeper:3.4.9
    ports:
      - "2181:2181"
    volumes:
      - ./storage/zookeeper/data:/data
      - ./storage/zookeeper/datalog:/datalog

  kafka:
    container_name: kafka1
    depends_on:
      - zoo
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka1:19092,LISTENER_LOCAL://localhost:9092
      KAFKA_BROKER_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
    hostname: kafka1
    image: confluentinc/cp-kafka:5.4.3
    ports:
      - "9092:9092"
    volumes:
      - ./storage/kafka/data:/var/lib/kafka/data

  movie-metadata-api:
    build:
      context: ./movie-metadata-api
      dockerfile: Dockerfile
    depends_on:
      - redis
    ports:
      - 3004:3001
    volumes:
      - ./storage:/opt/cache_sync/storage
      - ./mount/app/utils:/opt/cache_sync/app/utils
      - ./mount/config:/opt/cache_sync/config

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    depends_on:
      - postgresql
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: unless-stopped

  postgresql:
    command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_DB: bond_movies
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_USER: bond_movies
    image: postgres:11
    ports:
      - 5432:5432
    volumes:
    - ./data/postgres:/var/lib/postgresql/data

  process-queue-kafka-node:
    build:
      context: ./process-queue-kafka-node
      dockerfile: Dockerfile
    container_name: "process_queue"
    depends_on:
      - kafka
    environment:
      ADV_HOST: kafka1
      METADATA_API_URL: http://movie-metadata-api:3004
      BOND_MOVIE_API_URL: http://bond-movies-api-nodejs:3001
    ports:
      - 3005:3002

  process-queue-kafkajs:
    build:
      context: ./process-queue-kafkajs
      dockerfile: Dockerfile
    container_name: "process_queue"
    depends_on:
      - kafka
    environment:
      ADV_HOST: kafka1
      METADATA_API_URL: http://movie-metadata-api:3004
      BOND_MOVIE_API_URL: http://bond-movies-api-nodejs:3001
    ports:
      - 3006:3002
      - 56745:56745
      - 9229:9229

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    ports:
      - 6375:6375

  vanilla:
    image: nginx
    ports:
      - 3007:80
    volumes:
      - ./fe/vanilla/public:/usr/share/nginx/html:ro

  watch-reviews:
    build:
      context: ./watch-reviews
      dockerfile: Dockerfile
    container_name: "watch_reviews"
    environment:
      REVIEW_UPDATE_QUEUE_API_URL: http://process-queue-kafkajs:3006
    volumes:
      - ./watch-reviews/storage:/opt/watch_reviews/storage

